// Firefly Grove Database Schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  status    String   @default("ACTIVE") // ACTIVE, LOCKED, LEGACY
  isBetaTester Boolean @default(false) // Auto-upgraded to Family Grove
  isAdmin   Boolean @default(false) // Admin users see activity notifications
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Subscriptions
  stripeCustomerId       String?   @unique
  stripeSubscriptionId   String?   @unique
  subscriptionStatus     String?
  subscriptionEndsAt     DateTime?
  graceEndsAt            DateTime?

  // Relations
  grove            Grove?         @relation("UserGrove")
  persons          Person[]       @relation("PersonUser")
  trusteePerson    Person[]       @relation("PersonTrustee")
  ownedPerson      Person[]       @relation("PersonOwner")
  moderatorPerson  Person[]       @relation("PersonModerator")
  ownedBranches    Branch[]       @relation("BranchOwner")
  entries          Entry[]
  branchMemberships BranchMember[]
  sentInvites      Invite[]
  reports          Report[]       @relation("ReportedBy")
  audits           Audit[]        @relation("AuditActor")
  treeSubscriptions TreeSubscription[]
  sentTreeTransfers TreeTransfer[] @relation("TreeTransferSender")
  videoGenerations VideoGeneration[]
  soundArts SoundArt[] @relation("UserSoundArt")
  sparks Spark[] @relation("UserSparks")

  @@index([email])
  @@index([status])
  @@index([isBetaTester])
}

model Grove {
  id          String   @id @default(cuid())
  userId      String   @unique // One Grove per user
  name        String
  planType    String   @default("trial") // trial, family, ancestry, institutional
  treeLimit   Int      @default(1)
  treeCount   Int      @default(0) // Count of original trees only
  status      String   @default("active") // active, past_due, canceled, frozen

  // Open Grove flag
  isOpenGrove Boolean  @default(false) // System grove for public legacy trees

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Stripe fields
  stripeCustomerId       String? @unique
  stripeSubscriptionId   String? @unique
  stripePriceId          String?
  subscriptionEndsAt     DateTime?
  renewalDate            DateTime? // Next renewal date

  // Relations
  user         User              @relation("UserGrove", fields: [userId], references: [id], onDelete: Cascade)
  memberships  GroveTreeMembership[]
  trees        Tree[] // OLD MODEL - temporary for backward compatibility

  @@index([userId])
  @@index([status])
  @@index([stripeCustomerId])
  @@index([renewalDate])
  @@index([isOpenGrove])
}

// Person represents a global identity that can appear in multiple Groves
model Person {
  id          String   @id @default(cuid())
  userId      String?  // Optional: if this person is also a system user
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Legacy Tree fields
  birthDate         DateTime?
  deathDate         DateTime?
  isLegacy          Boolean  @default(false)

  // Roles for legacy tree management
  trusteeId         String?  // Temporary manager (e.g., funeral home)
  ownerId           String?  // Permanent family owner
  moderatorId       String?  // Content approver (defaults to owner)
  trusteeExpiresAt  DateTime? // 60 days from creation

  // Discovery & limits
  discoveryEnabled  Boolean  @default(true) // Public search toggle
  memoryLimit       Int?     // 100 for Open Grove, null for private groves
  memoryCount       Int      @default(0) // Track current count

  // Relations
  user         User?              @relation("PersonUser", fields: [userId], references: [id])
  trustee      User?              @relation("PersonTrustee", fields: [trusteeId], references: [id])
  owner        User?              @relation("PersonOwner", fields: [ownerId], references: [id])
  moderator    User?              @relation("PersonModerator", fields: [moderatorId], references: [id])
  memberships  GroveTreeMembership[]
  branches     Branch[]
  treeTransfers TreeTransfer[]    @relation("TreeTransferPerson")

  @@index([userId])
  @@index([trusteeId])
  @@index([ownerId])
  @@index([moderatorId])
  @@index([isLegacy])
  @@index([discoveryEnabled])
}

// Junction table linking Groves and Persons (Trees)
model GroveTreeMembership {
  id                   String   @id @default(cuid())
  groveId              String
  personId             String
  isOriginal           Boolean  @default(false) // true if planted here, false if linked
  subscriptionOwnerId  String?  // User who pays for individual tree subscription
  status               String   @default("active") // active, frozen

  // Adoption type for legacy trees
  adoptionType         String   @default("adopted") // "adopted" (moved, uses slot) or "rooted" (linked, no slot)

  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  // Relations
  grove                Grove    @relation(fields: [groveId], references: [id], onDelete: Cascade)
  person               Person   @relation(fields: [personId], references: [id], onDelete: Cascade)
  subscription         TreeSubscription? @relation("MembershipSubscription")

  @@unique([groveId, personId])
  @@index([groveId])
  @@index([personId])
  @@index([isOriginal])
  @@index([status])
  @@index([subscriptionOwnerId])
  @@index([adoptionType])
}

// TEMPORARY: Old Tree model kept for backward compatibility during migration
// Will be removed after Person model migration is complete
model Tree {
  id          String   @id @default(cuid())
  groveId     String
  name        String
  description String?
  status      String   @default("ACTIVE") // ACTIVE, ARCHIVED

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  grove       Grove    @relation(fields: [groveId], references: [id], onDelete: Cascade)
  branches    Branch[] @relation("TreeBranches") // Temporary for migration

  @@index([groveId])
  @@index([status])
}

// Individual Tree Subscription ($4.99/year)
model TreeSubscription {
  id                    String   @id @default(cuid())
  userId                String   // Person paying for the subscription
  membershipId          String   @unique // Links to specific grove_tree_membership
  status                String   @default("active") // active, past_due, canceled, frozen
  stripeSubscriptionId  String?  @unique
  stripePriceId         String?
  renewalDate           DateTime?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relations
  user                  User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  membership            GroveTreeMembership @relation("MembershipSubscription", fields: [membershipId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([membershipId])
  @@index([status])
  @@index([stripeSubscriptionId])
  @@index([renewalDate])
}

model Branch {
  id          String   @id @default(cuid())
  personId    String?  // Links to Person (global identity) - MIGRATION PENDING
  treeId      String?  // Links to Tree (old model) - will be removed after Person migration
  ownerId     String   // User who owns/manages this branch
  title       String
  description String?
  status      String   @default("ACTIVE") // ACTIVE, ARCHIVED, LEGACY_RELEASED
  type        String   @default("living") // living, legacy

  // Legacy Mode fields
  personStatus      String   @default("living") // living, legacy (deprecated, use type)
  birthDate         DateTime?
  deathDate         DateTime?
  legacyEnteredAt   DateTime? // When status changed to legacy
  legacyMarkedBy    String?   // User who marked as legacy
  legacyProofUrl    String?   // Optional proof artifact (private)

  // Archive control
  archived    Boolean  @default(false)
  archivedAt  DateTime?
  archivedBy  String?  // User ID who archived it

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  person            Person?             @relation(fields: [personId], references: [id], onDelete: Cascade)
  tree              Tree?               @relation("TreeBranches", fields: [treeId], references: [id], onDelete: Cascade)
  owner             User                @relation("BranchOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  entries           Entry[]
  members           BranchMember[]
  heirs             Heir[]
  invites           Invite[]
  legacyHeirs       LegacyHeir[]
  preferences       BranchPreferences?
  memoryLinks       MemoryBranchLink[]
  localMetadata     MemoryLocalMeta[]

  @@index([personId])
  @@index([treeId])
  @@index([ownerId])
  @@index([status])
  @@index([archived])
  @@index([personStatus])
  @@index([type])
}

model Entry {
  id          String   @id @default(cuid())
  branchId    String
  authorId    String
  text        String
  visibility  String   @default("PRIVATE") // PRIVATE, SHARED, LEGACY
  legacyFlag  Boolean  @default(false)
  mediaUrl    String?
  audioUrl    String?
  approved    Boolean  @default(true)

  // Soft delete and control fields
  status      String   @default("ACTIVE") // ACTIVE, WITHDRAWN, HIDDEN, DELETED
  contentHash String?  // For duplicate detection
  withdrawnAt DateTime?
  hiddenAt    DateTime?
  deletedAt   DateTime?
  hiddenBy    String?  // User ID who hid it
  deletedBy   String?  // User ID who deleted it

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  branch          Branch              @relation(fields: [branchId], references: [id], onDelete: Cascade)
  author          User                @relation(fields: [authorId], references: [id], onDelete: Cascade)
  reports         Report[]
  memoryLinks     MemoryBranchLink[]  @relation("MemoryLinks")
  localMetadata   MemoryLocalMeta[]   @relation("MemoryLocalMeta")

  @@index([branchId])
  @@index([authorId])
  @@index([visibility])
  @@index([status])
  @@index([createdAt])
  @@index([contentHash])
}

model BranchMember {
  id         String   @id @default(cuid())
  branchId   String
  userId     String
  role       String   @default("GUEST") // OWNER, GUEST
  approved   Boolean  @default(false)
  createdAt  DateTime @default(now())

  // Relations
  branch     Branch   @relation(fields: [branchId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([branchId, userId])
  @@index([userId])
}

model Heir {
  id               String   @id @default(cuid())
  branchId         String
  heirEmail        String
  releaseCondition String   @default("AFTER_DEATH") // AFTER_DEATH, AFTER_DATE, MANUAL
  releaseDate      DateTime?
  notified         Boolean  @default(false)
  notifiedAt       DateTime?
  downloadToken    String?  @unique
  createdAt        DateTime @default(now())

  // Relations
  branch           Branch   @relation(fields: [branchId], references: [id], onDelete: Cascade)

  @@index([branchId])
  @@index([heirEmail])
}

model Backup {
  id          String   @id @default(cuid())
  filename    String
  storageUrl  String
  size        Int
  hash        String
  createdAt   DateTime @default(now())
  verified    Boolean  @default(false)
  verifiedAt  DateTime?

  @@index([createdAt])
}

model Invite {
  id          String   @id @default(cuid())
  inviterId   String
  email       String
  branchId    String
  token       String   @unique
  status      String   @default("PENDING") // PENDING, ACCEPTED, EXPIRED
  expiresAt   DateTime
  createdAt   DateTime @default(now())
  acceptedAt  DateTime?

  // Relations
  inviter     User     @relation(fields: [inviterId], references: [id], onDelete: Cascade)
  branch      Branch   @relation(fields: [branchId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([email])
  @@index([branchId])
  @@index([status])
}

model Report {
  id          String   @id @default(cuid())
  memoryId    String
  reporterId  String
  reason      String   // HARASSMENT, PRIVATE_INFO, SPAM, OTHER
  notes       String?
  status      String   @default("OPEN") // OPEN, ACTION_TAKEN, DISMISSED
  actionNotes String?
  actionBy    String?  // Admin who resolved
  createdAt   DateTime @default(now())
  closedAt    DateTime?

  // Relations
  memory      Entry    @relation(fields: [memoryId], references: [id], onDelete: Cascade)
  reporter    User     @relation("ReportedBy", fields: [reporterId], references: [id], onDelete: Cascade)

  @@index([memoryId])
  @@index([reporterId])
  @@index([status])
  @@index([createdAt])
}

model Audit {
  id          String   @id @default(cuid())
  actorId     String
  action      String   // CREATE, UPDATE, DELETE, WITHDRAW, HIDE, RESTORE, ARCHIVE, etc.
  targetType  String   // ENTRY, BRANCH, USER, etc.
  targetId    String
  metadata    String?  // JSON string
  createdAt   DateTime @default(now())

  // Relations
  actor       User     @relation("AuditActor", fields: [actorId], references: [id], onDelete: Cascade)
  // Note: entry relation removed to prevent foreign key constraint on non-Entry targets

  @@index([actorId])
  @@index([targetType, targetId])
  @@index([action])
  @@index([createdAt])
}

// Cross-Branch Sharing: Link memories to multiple branches
model MemoryBranchLink {
  id                String   @id @default(cuid())
  memoryId          String   // Entry ID
  branchId          String
  role              String   // "origin" or "shared"
  visibilityStatus  String   @default("active") // active, removed_by_branch, removed_by_user, pending_approval
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  memory            Entry    @relation("MemoryLinks", fields: [memoryId], references: [id], onDelete: Cascade)
  branch            Branch   @relation(fields: [branchId], references: [id], onDelete: Cascade)

  @@unique([memoryId, branchId])
  @@index([memoryId])
  @@index([branchId])
  @@index([role])
  @@index([visibilityStatus])
}

// Per-branch local metadata for shared memories
model MemoryLocalMeta {
  id                    String   @id @default(cuid())
  memoryId              String
  branchId              String
  localReactionsCount   Int      @default(0)
  localCommentsCount    Int      @default(0)
  pinned                Boolean  @default(false)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relations
  memory                Entry    @relation("MemoryLocalMeta", fields: [memoryId], references: [id], onDelete: Cascade)
  branch                Branch   @relation(fields: [branchId], references: [id], onDelete: Cascade)

  @@unique([memoryId, branchId])
  @@index([memoryId])
  @@index([branchId])
  @@index([pinned])
}

// Branch-level preferences for memory association controls
model BranchPreferences {
  id                      String   @id @default(cuid())
  branchId                String   @unique
  canBeTagged             Boolean  @default(true)
  requiresTagApproval     Boolean  @default(false)
  visibleInCrossShares    Boolean  @default(true)
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt

  // Relations
  branch                  Branch   @relation(fields: [branchId], references: [id], onDelete: Cascade)

  @@index([branchId])
  @@index([canBeTagged])
  @@index([requiresTagApproval])
}

// Legacy Tree heirs and stewards
model LegacyHeir {
  id          String   @id @default(cuid())
  branchId    String
  userId      String
  role        String   // "steward" or "heir"
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  branch      Branch   @relation(fields: [branchId], references: [id], onDelete: Cascade)

  @@unique([branchId, userId])
  @@index([branchId])
  @@index([userId])
  @@index([role])
}

// Beta invite tracking
model BetaInvite {
  id          String   @id @default(cuid())
  email       String   // Email address invited
  name        String?  // Optional name of invitee
  message     String?  // Custom message from sender
  sentBy      String   // User ID who sent the invite
  signedUp    Boolean  @default(false) // True once they create account
  signedUpAt  DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([email])
  @@index([email])
  @@index([sentBy])
  @@index([signedUp])
  @@index([createdAt])
}

// Cross-grove branch connection requests
// Enables two-sided consent when linking branches to shared Person entities
model BranchConnectionRequest {
  id              String   @id @default(cuid())
  requesterId     String   // User requesting the connection
  personId        String   // The Person entity they want to connect to
  branchId        String   // The branch they want to link
  targetUserId    String?  // User who owns the Person (if Person.userId exists)
  status          String   @default("pending") // pending, accepted, declined, expired
  message         String?  // Optional message from requester

  // Response tracking
  respondedAt     DateTime?
  respondedBy     String?  // User who accepted/declined

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  expiresAt       DateTime // Auto-decline after 30 days

  @@index([requesterId])
  @@index([personId])
  @@index([targetUserId])
  @@index([status])
  @@index([expiresAt])
  @@index([createdAt])
}

// Person-to-Person Root Connections
// Links two Person entities (trees) representing the same individual across groves
// Enables bidirectional memory sharing without duplication
model PersonRoot {
  id              String   @id @default(cuid())
  personId1       String   // First person in the root connection
  personId2       String   // Second person in the root connection
  status          String   @default("active") // active, disconnected

  // Creation tracking
  createdBy       String   // User who initiated the root
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Optional: Disconnection tracking
  disconnectedAt  DateTime?
  disconnectedBy  String?

  @@unique([personId1, personId2])
  @@index([personId1])
  @@index([personId2])
  @@index([status])
  @@index([createdAt])
}

// Tree Transfer Requests
// Enables transferring trees between users via email invitation
model TreeTransfer {
  id              String   @id @default(cuid())
  personId        String   // The Person/Tree being transferred
  senderUserId    String   // User sending the tree
  recipientEmail  String   // Email of the recipient
  message         String?  // Optional message from sender
  status          String   @default("pending") // pending, accepted, declined, expired, cancelled
  token           String   @unique // Unique token for acceptance link

  // Acceptance tracking
  acceptedAt      DateTime?
  acceptedBy      String?  // User who accepted (after creating account if needed)
  destinationGroveId String? // Grove where tree was placed after acceptance

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  expiresAt       DateTime // Auto-expire after 30 days

  // Relations
  person          Person   @relation("TreeTransferPerson", fields: [personId], references: [id], onDelete: Cascade)
  sender          User     @relation("TreeTransferSender", fields: [senderUserId], references: [id], onDelete: Cascade)

  @@index([personId])
  @@index([senderUserId])
  @@index([recipientEmail])
  @@index([status])
  @@index([token])
  @@index([expiresAt])
  @@index([createdAt])
}

// Video Generation Tracking
// Tracks memorial videos created by users with tiered access controls
model VideoGeneration {
  id                String   @id @default(cuid())
  userId            String   // User who generated the video
  planType          String   // Plan at time of generation: free, family, ancestry, institutional, admin

  // Video metadata
  title             String?
  photoCount        Int
  durationSeconds   Int
  sizeBytes         Int?

  // Storage tracking
  storageUrl        String?  // B2 or local storage URL (if we store them)
  downloaded        Boolean  @default(false)
  downloadedAt      DateTime?
  downloadCount     Int      @default(0)

  // Watermark flag (free tier gets watermark)
  hasWatermark      Boolean  @default(false)

  // Lifecycle
  autoDeleteAt      DateTime? // Based on plan tier: 30/60/90 days or null for permanent
  deletedAt         DateTime?

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([planType])
  @@index([createdAt])
  @@index([autoDeleteAt])
  @@index([deletedAt])
}

// Sound Art - Audio waveform artwork generator
model SoundArt {
  id                String   @id @default(cuid())
  userId            String?  // Optional - can create without login
  uniqueCode        String   @unique // Short code for QR/URL (e.g., "a3f7k2")

  // Audio storage
  audioUrl          String   // Vercel Blob storage URL
  audioFilename     String
  audioSizeBytes    Int
  audioDuration     Float    // Duration in seconds

  // Generated artwork
  artworkUrl        String?  // Generated image URL (if stored)
  waveformData      String   // JSON array of waveform points

  // Customization settings
  title             String?
  stylePreset       String   @default("modern") // modern, minimal, vintage, neon, etc.
  primaryColor      String   @default("#FFD966") // Hex color
  backgroundColor   String   @default("#0A0E14") // Hex color
  waveformStyle     String   @default("bars") // bars, curve, mirror, circular

  // Analytics
  playCount         Int      @default(0)
  downloadCount     Int      @default(0)
  lastPlayedAt      DateTime?

  // Lifecycle
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  expiresAt         DateTime? // Optional expiration for free tier
  deletedAt         DateTime?

  // Relations
  user              User?    @relation("UserSoundArt", fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([uniqueCode])
  @@index([createdAt])
  @@index([expiresAt])
  @@index([deletedAt])
}

// Sparks - Memory prompts to inspire content creation
model Spark {
  id          String   @id @default(cuid())
  userId      String?  // Null for admin-created global sparks
  branchId    String?  // For custom user-uploaded sparks (branch-specific)
  text        String   // The prompt text (e.g., "What was your first memory with this person?")
  category    String?  // Category like "Childhood", "Family", "Career", "Hobbies", "Relationships", etc.
  sparkType   String   @default("standard") // "standard" (system), "challenge" (seasonal), "custom" (user-uploaded)
  isGlobal    Boolean  @default(false) // Admin-created sparks shown to all users
  isActive    Boolean  @default(true) // Can be deactivated by user or admin
  usageCount  Int      @default(0) // Track how often this prompt is used

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User?    @relation("UserSparks", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([branchId])
  @@index([sparkType])
  @@index([isGlobal])
  @@index([isActive])
  @@index([category])
  @@index([createdAt])
  @@index([usageCount])
}
