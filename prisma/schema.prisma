// Firefly Grove Database Schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  status    String   @default("ACTIVE") // ACTIVE, LOCKED, LEGACY
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Subscriptions
  stripeCustomerId       String?   @unique
  stripeSubscriptionId   String?   @unique
  subscriptionStatus     String?
  subscriptionEndsAt     DateTime?
  graceEndsAt            DateTime?

  // Relations
  ownedGroves      Grove[]        @relation("GroveOwner")
  ownedTrees       Tree[]         @relation("TreeOwner")
  ownedBranches    Branch[]       @relation("BranchOwner")
  entries          Entry[]
  branchMemberships BranchMember[]
  sentInvites      Invite[]
  reports          Report[]       @relation("ReportedBy")
  audits           Audit[]        @relation("AuditActor")

  @@index([email])
  @@index([status])
}

model Grove {
  id          String   @id @default(cuid())
  ownerId     String
  name        String
  planType    String   @default("trial") // trial, family, ancestry, institutional
  treeLimit   Int      @default(1)
  status      String   @default("active") // active, past_due, canceled
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Stripe fields
  stripeCustomerId       String? @unique
  stripeSubscriptionId   String? @unique
  stripePriceId          String?
  subscriptionEndsAt     DateTime?

  // Relations
  owner       User     @relation("GroveOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  trees       Tree[]

  @@index([ownerId])
  @@index([status])
  @@index([stripeCustomerId])
}

model Tree {
  id          String   @id @default(cuid())
  groveId     String
  ownerId     String   // Tree steward
  name        String
  description String?
  status      String   @default("ACTIVE") // ACTIVE, ARCHIVED

  // Future: buy-out tracking
  transferredFromGroveId String?

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  grove       Grove    @relation(fields: [groveId], references: [id], onDelete: Cascade)
  owner       User     @relation("TreeOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  branches    Branch[]

  @@index([groveId])
  @@index([ownerId])
  @@index([status])
}

model Branch {
  id          String   @id @default(cuid())
  treeId      String?  // Nullable during migration, will be required after
  ownerId     String
  title       String
  description String?
  status      String   @default("ACTIVE") // ACTIVE, ARCHIVED, LEGACY_RELEASED

  // Archive control
  archived    Boolean  @default(false)
  archivedAt  DateTime?
  archivedBy  String?  // User ID who archived it

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  tree        Tree?    @relation(fields: [treeId], references: [id], onDelete: Cascade)
  owner       User     @relation("BranchOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  entries     Entry[]
  members     BranchMember[]
  heirs       Heir[]
  invites     Invite[]

  @@index([treeId])
  @@index([ownerId])
  @@index([status])
  @@index([archived])
}

model Entry {
  id          String   @id @default(cuid())
  branchId    String
  authorId    String
  text        String
  visibility  String   @default("PRIVATE") // PRIVATE, SHARED, LEGACY
  legacyFlag  Boolean  @default(false)
  mediaUrl    String?
  audioUrl    String?
  approved    Boolean  @default(true)

  // Soft delete and control fields
  status      String   @default("ACTIVE") // ACTIVE, WITHDRAWN, HIDDEN, DELETED
  contentHash String?  // For duplicate detection
  withdrawnAt DateTime?
  hiddenAt    DateTime?
  deletedAt   DateTime?
  hiddenBy    String?  // User ID who hid it
  deletedBy   String?  // User ID who deleted it

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  branch      Branch   @relation(fields: [branchId], references: [id], onDelete: Cascade)
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  reports     Report[]
  audits      Audit[]  @relation("EntryAudits")

  @@index([branchId])
  @@index([authorId])
  @@index([visibility])
  @@index([status])
  @@index([createdAt])
  @@index([contentHash])
}

model BranchMember {
  id         String   @id @default(cuid())
  branchId   String
  userId     String
  role       String   @default("GUEST") // OWNER, GUEST
  approved   Boolean  @default(false)
  createdAt  DateTime @default(now())

  // Relations
  branch     Branch   @relation(fields: [branchId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([branchId, userId])
  @@index([userId])
}

model Heir {
  id               String   @id @default(cuid())
  branchId         String
  heirEmail        String
  releaseCondition String   @default("AFTER_DEATH") // AFTER_DEATH, AFTER_DATE, MANUAL
  releaseDate      DateTime?
  notified         Boolean  @default(false)
  notifiedAt       DateTime?
  downloadToken    String?  @unique
  createdAt        DateTime @default(now())

  // Relations
  branch           Branch   @relation(fields: [branchId], references: [id], onDelete: Cascade)

  @@index([branchId])
  @@index([heirEmail])
}

model Backup {
  id          String   @id @default(cuid())
  filename    String
  storageUrl  String
  size        Int
  hash        String
  createdAt   DateTime @default(now())
  verified    Boolean  @default(false)
  verifiedAt  DateTime?

  @@index([createdAt])
}

model Invite {
  id          String   @id @default(cuid())
  inviterId   String
  email       String
  branchId    String
  token       String   @unique
  status      String   @default("PENDING") // PENDING, ACCEPTED, EXPIRED
  expiresAt   DateTime
  createdAt   DateTime @default(now())
  acceptedAt  DateTime?

  // Relations
  inviter     User     @relation(fields: [inviterId], references: [id], onDelete: Cascade)
  branch      Branch   @relation(fields: [branchId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([email])
  @@index([branchId])
  @@index([status])
}

model Report {
  id          String   @id @default(cuid())
  memoryId    String
  reporterId  String
  reason      String   // HARASSMENT, PRIVATE_INFO, SPAM, OTHER
  notes       String?
  status      String   @default("OPEN") // OPEN, ACTION_TAKEN, DISMISSED
  actionNotes String?
  actionBy    String?  // Admin who resolved
  createdAt   DateTime @default(now())
  closedAt    DateTime?

  // Relations
  memory      Entry    @relation(fields: [memoryId], references: [id], onDelete: Cascade)
  reporter    User     @relation("ReportedBy", fields: [reporterId], references: [id], onDelete: Cascade)

  @@index([memoryId])
  @@index([reporterId])
  @@index([status])
  @@index([createdAt])
}

model Audit {
  id          String   @id @default(cuid())
  actorId     String
  action      String   // CREATE, UPDATE, DELETE, WITHDRAW, HIDE, RESTORE, ARCHIVE, etc.
  targetType  String   // ENTRY, BRANCH, USER, etc.
  targetId    String
  metadata    String?  // JSON string
  createdAt   DateTime @default(now())

  // Relations
  actor       User     @relation("AuditActor", fields: [actorId], references: [id], onDelete: Cascade)
  entry       Entry?   @relation("EntryAudits", fields: [targetId], references: [id])

  @@index([actorId])
  @@index([targetType, targetId])
  @@index([action])
  @@index([createdAt])
}
